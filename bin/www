#!/usr/bin/env node

/**
 * Module dependencies.
 */
// import Moralis from 'moralis';
// import { EvmChain } from '@moralisweb3/evm-utils';

var app = require('../src/app');
var debug = require('debug')('backend:server');
var https = require('https');
var fs = require(`fs`);

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3001');
// app.set('port', port);


const options = {
//   key: fs.readFileSync('/home/node_api/cert/2.key'),
//   cert: fs.readFileSync('/home/node_api/cert/api_discoverilla_com.crt')
}
/**
 * Create HTTP server.
 */

// var server = https.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port, function () {
//     console.log("Listening on ", port)
// })
// server.on('error', onError);
// server.on('listening', onListening);
 https.createServer(options, app.app).listen(443);
// https.createServer(options, function(req, res) {

//    res.writeHead(200);
//    res.end("Hello world\n");
// }).listen(443);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);

}
