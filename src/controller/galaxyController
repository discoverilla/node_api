const url = require('url')
const uploadFile = require("../middleware/upload");

var db = require('../database/database');
const message = require('../constants/message')

exports.getOne = async (req, res) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "X-Requested-With");
    return new Promise((resolve, reject) => {
        try {
            var req_body = '';
            req.on('data', function (data) {
                req_body += data;
                if (req_body.length > 1e6)
                    req.connection.destroy();
            });
            req.on('end', function () {
                let post_data =  url.parse(req.url, true).query;
                let uuid = post_data["uuid"];

                let query = 'SELECT * FROM galaxy Where uuid = ?';

                db.query(query, [uuid], (error, rows, fields) => {
                    if (error) {
                        reject({ message: message.INTERNAL_SERVER_ERROR })
                    } else {
                        if (rows.length > 0) {
                            res.json({code: 200, message: message.ACTION_SUCCESS, data: rows[0]})   
                        } else 
                            res.json({code: 999, message: message.DATA_NOT_EXIST})   
                    }
                })
            });
        } catch (error) {
            res.json({code: 999, error, message: `Unable to fetch data on ${req.route.path}` })
        }
    });
}

exports.uploadOne = async (req, res) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    //   return new Promise((resolve, reject) => {
          try {
            await uploadFile(req, res);
            if (req.file == undefined) {
            return res.status(400).send({ message: "Upload a file please!" });
            }
            /*let query = 'Insert into galaxy (created_at, updated_at, user_id, amount, payment_address, comment, user_name, uuid, real_amount) values (?,?,?,?,?,?,?,?,?)'
            con.query(query, [timeHelper.getCurrentDate(),timeHelper.getCurrentDate(),user_id, amount, payment_address, comment, user_name, uuid.v1(), real_amount], (error, rows, fields) => {
                if (error) {
                    throw error;
                } else {
                    let token = jwt.sign({ data: timeHelper.getCurrentTime() }, key.JWT_SECRET_KEY, {
                    })
                    res.json({code: 200, message: message.ACTION_SUCCESS, data: {token: token}})
                }
            })*/
            res.status(200).send({
                message: "The following file was uploaded successfully: " + req.file.originalname,
            });
          } catch (error) {
              res.json({code: 999, error, message: `Unable to fetch data on ${req.route.path}` })
          }
    //   });
  }
